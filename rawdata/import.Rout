> ## -----
> ## Utils
> ## -----
> "%without%" <-  function(x, y) x[!(x %in% y)]
> 
> ## Function for 'extracting' description from naming scheme
> description <- function(x) {
+   if (grepl("^E\\d\\d", x, perl = TRUE)) {
+     ## E - Exercises match
+     sub("^E(\\d\\d)(.*)" ,
+         "Dataset for Exercise \\2, Chapter \\1",
+         x,
+         perl = TRUE)
+   } else if (grepl("^T\\d\\d\\d{1,2}$", x, perl = TRUE)) {
+     ## T - Tables
+     sub("^T(\\d\\d)(\\d{1,2})$" ,
+         "Dataset from Table \\1.\\2",
+         x,
+         perl = TRUE)
+   } else if (grepl("^X\\d\\d\\d{1,2}$", x, perl = TRUE)) {
+     ## X - Examples
+     sub("^X(\\d\\d)(\\d{1,2})$" ,
+         "Dataset for Example \\2, Chapter \\1",
+         x,
+         perl = TRUE)
+   } else if (grepl("^A\\d\\d[A-Z]$", x, perl = TRUE)) {
+     ## A - Appendixes
+     sub("^A(\\d\\d)([A-Z])$" ,
+         "Dataset for Appendix \\2, Chapter \\1",
+         x,
+         perl = TRUE)
+   } else if (grepl("^S\\d\\d\\d{1,2}$", x, perl = TRUE)) {
+     ## S - Sections
+     sub("^S(\\d\\d)(\\d{1,2})$" ,
+         "Dataset for Section \\1.\\2",
+         x,
+         perl = TRUE)
+   } else if (grepl("^Q\\d\\d-\\d-\\d$", x, perl = TRUE)) {
+     ## Q - Equations
+     sub("^Q(\\d\\d)-(\\d)-(\\d)$" ,
+         "Dataset for Equation \\1.\\2.\\3",
+         x,
+         perl = TRUE)
+   } else
+     ## When anything else fails ...
+     sprintf("%s data", x)
+ }
> 
> ## ------
> ## Status
> ## ------
> TODO <- c("")
> processed <- list.files("cleaned") %without% TODO
> 
> ## ------
> ## Import
> ## ------
> import.fun <- function(path) {
+   cat("Importing", path , "\n")
+   res <- read.table(file = path, header = TRUE, fill = TRUE)
+   res <- res[, names(res) %without% "id"]
+   ## filenam from cleaned directory
+   fileName <- strsplit(path, "/")[[1]][2]
+   ## Exceptions to data.frame of fully numeric data here ...
+   if (fileName == "X161") {
+     res <- unname(as.matrix(res))
+   } else if (fileName == "E07C") {
+     res$x4 <- factor(res$x4, levels = c(-1,1), labels = c("No","Yes"))
+   } else if (fileName == "T032") {
+     res$z <- factor(res$z, levels = 0:1, labels = c("Virgo","Coma"))
+   } else if (fileName == "E14B") {
+     res <- within(res, {
+       tiller <- factor(tiller)
+       type <- factor(type, levels = c("w","c"), labels = c("Waldron","Ciano"))
+       nrate <- factor(nrate, levels = c(0,50,270))
+     })
+   } else if (fileName == "E14C") {
+     res$operator <- factor(res$operator, levels = 1:3)
+   } else if (fileName == "E14R") {
+     res <- within(res, {
+       boot <- factor(boot, levels = c(-1,1), labels = c("A","B"))
+       temperature <- factor(temperature)
+       subject <- factor(subject)
+     })
+   } else if (fileName == "E23E") {
+     res <- within(res, {
+       a <- factor(a, levels = c(-1,1), labels = c("No","Yes"))
+       b <- factor(b, levels = c(-1,1), labels = c("No","Yes"))
+       c <- factor(c, levels = c(-1,1), labels = c("No","Yes"))
+       d <- factor(d, levels = c(-1,1), labels = c("No","Yes"))
+     })
+   } else if (fileName == "E23F") {
+     res <- within(res, {
+       group <- factor(group)
+     })
+   } else if (fileName %in% c("E23G-1","E23G-2")) {
+     res <- within(res, {
+       level <- factor(level)
+       tube <- factor(tube)
+     })
+   } else if (fileName == "E23H") {
+     res <- within(res, {
+       matings <- factor(matings, levels = 1:4,
+                         labels = c("DD","DS","SD","SS"))
+     })
+   }
+   ## END Exceptions
+   ## Now, attach a bit of metadata (useful in what follows) to the object
+   attr(res, "fileName") <- fileName
+   dfName <- gsub("-","_", fileName)
+   dfName <- paste0("ds", dfName)
+   dfName <- tolower(dfName)
+   attr(res, "dfName") <- dfName
+   ## Description of the data
+   attr(res, "dfDescription") <- description(fileName)
+   res
+ }
> pathList <- as.list( paste0("cleaned", "/", processed) )
> dfList <- lapply(pathList, import.fun)
Importing cleaned/A01A 
Importing cleaned/A06B 
Importing cleaned/A15A 
Importing cleaned/E03A 
Importing cleaned/E03AA 
Importing cleaned/E03BB 
Importing cleaned/E03C 
Importing cleaned/E03CC 
Importing cleaned/E03DD 
Importing cleaned/E03E 
Importing cleaned/E03EE 
Importing cleaned/E03F 
Importing cleaned/E03G 
Importing cleaned/E03GG 
Importing cleaned/E03H 
Importing cleaned/E03HH 
Importing cleaned/E03I 
Importing cleaned/E03II 
Importing cleaned/E03J 
Importing cleaned/E03JJ 
Importing cleaned/E03JJ2 
Importing cleaned/E03JJ3 
Importing cleaned/E03K 
Importing cleaned/E03KK 
Importing cleaned/E03LL 
Importing cleaned/E03N 
Importing cleaned/E03O 
Importing cleaned/E03R 
Importing cleaned/E03V 
Importing cleaned/E03W 
Importing cleaned/E03X 
Importing cleaned/E03Z 
Importing cleaned/E04D 
Importing cleaned/E04E 
Importing cleaned/E04F 
Importing cleaned/E06A 
Importing cleaned/E06B 
Importing cleaned/E06C 
Importing cleaned/E06D 
Importing cleaned/E06E 
Importing cleaned/E06F 
Importing cleaned/E06G 
Importing cleaned/E06H 
Importing cleaned/E06I 
Importing cleaned/E06J 
Importing cleaned/E06K 
Importing cleaned/E06L 
Importing cleaned/E06Z 
Importing cleaned/E07B 
Importing cleaned/E07C 
Importing cleaned/E08B 
Importing cleaned/E09B 
Importing cleaned/E12A 
Importing cleaned/E12B 
Importing cleaned/E12C 
Importing cleaned/E12D 
Importing cleaned/E12E 
Importing cleaned/E12H 
Importing cleaned/E13A 
Importing cleaned/E13B 
Importing cleaned/E13C 
Importing cleaned/E13D 
Importing cleaned/E13E 
Importing cleaned/E13F 
Importing cleaned/E13G 
Importing cleaned/E13H 
Importing cleaned/E14B 
Importing cleaned/E14C 
Importing cleaned/E14D 
Importing cleaned/E14E 
Importing cleaned/E14F 
Importing cleaned/E14G 
Importing cleaned/E14J 
Importing cleaned/E14L 
Importing cleaned/E14Q 
Importing cleaned/E14R 
Importing cleaned/E14S 
Importing cleaned/E14T 
Importing cleaned/E14U 
Importing cleaned/E15A 
Importing cleaned/E15B 
Importing cleaned/E15C 
Importing cleaned/E15E 
Importing cleaned/E15F 
Importing cleaned/E15H 
Importing cleaned/E15I 
Importing cleaned/E15J 
Importing cleaned/E15K 
Importing cleaned/E15L 
Importing cleaned/E15N 
Importing cleaned/E15P 
Importing cleaned/E16A 
Importing cleaned/E16B 
Importing cleaned/E16C 
Importing cleaned/E16D 
Importing cleaned/E17B 
Importing cleaned/E19D 
Importing cleaned/E22A 
Importing cleaned/E22B 
Importing cleaned/E22C 
Importing cleaned/E22D 
Importing cleaned/E22E 
Importing cleaned/E22F 
Importing cleaned/E22G 
Importing cleaned/E23A-a 
Importing cleaned/E23A-b 
Importing cleaned/E23D 
Importing cleaned/E23E 
Importing cleaned/E23F 
Importing cleaned/E23G-1 
Importing cleaned/E23G-2 
Importing cleaned/E23H 
Importing cleaned/E24A 
Importing cleaned/E24B 
Importing cleaned/E24C 
Importing cleaned/E24D 
Importing cleaned/E24E 
Importing cleaned/E24G 
Importing cleaned/E24H 
Importing cleaned/E24I 
Importing cleaned/E24J 
Importing cleaned/E24K 
Importing cleaned/E24L 
Importing cleaned/E24M 
Importing cleaned/E24N 
Importing cleaned/E24O 
Importing cleaned/E24P 
Importing cleaned/Q23-3-3 
Importing cleaned/Q23-3-7 
Importing cleaned/Q23-7-5 
Importing cleaned/S217 
Importing cleaned/S222 
Importing cleaned/S2310 
Importing cleaned/T021 
Importing cleaned/T032 
Importing cleaned/T033 
Importing cleaned/T081 
Importing cleaned/T121 
Importing cleaned/T132 
Importing cleaned/T134 
Importing cleaned/T141 
Importing cleaned/T144 
Importing cleaned/T145 
Importing cleaned/T146 
Importing cleaned/T181 
Importing cleaned/T191 
Importing cleaned/T192 
Importing cleaned/T232 
Importing cleaned/T242 
Importing cleaned/T252 
Importing cleaned/T253 
Importing cleaned/T261 
Importing cleaned/X161 
> 
> ## -------------------
> ## making roxygen2 doc
> ## -------------------
> doc.fun <- function(x){
+   
+   dfName <- attr(x, "dfName")
+   ## Header section
+   Header <- c(
+     sprintf("#' %s", attr(x, "dfDescription") ),
+     "#' ",
+     sprintf("#' %s", attr(x, "dfDescription")),
+     "#' "
+   )
+   ## Format/Describe section (if data.frame give names of columns,
+   ## otherwise if matrix list only ncol and nrow.
+   makeRdItems <- function(item){
+     unlist(lapply(item, function(x) sprintf("#' \\item{%s}{}", x)))
+   }
+   Format <- sprintf("#' @format A \\code{%s} with %s rows and %s %s%s",
+                     class(x), nrow(x), ncol(x),
+                     ifelse(is.matrix(x), "columns", "variables"),
+                     ifelse(is.matrix(x), ".", ":"))
+   if (class(x) == "data.frame")
+     Format <- c(Format , "#' \\describe{", makeRdItems(names(x)), "#' }")
+ 
+   ## The source book
+   Source <- paste0("#' @source Draper, N.R., Smith, H., (1998) ",
+                    "Applied Regression Analyis, 3rd ed., ",
+                    "New York: Wiley")
+   ## Simple examples
+   Examples <- c("#' @examples",
+                 sprintf("#' %s", dfName))
+   ## and the name of the dataset as string
+   Dataset <- sprintf("'%s'", dfName)
+   ## write all to the appropriate .R file
+   writeLines(text = c(Header, Format, Source, Examples, Dataset),
+              con = sprintf("../R/%s.R", dfName))
+ }
> lapply(dfList, doc.fun)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

[[31]]
NULL

[[32]]
NULL

[[33]]
NULL

[[34]]
NULL

[[35]]
NULL

[[36]]
NULL

[[37]]
NULL

[[38]]
NULL

[[39]]
NULL

[[40]]
NULL

[[41]]
NULL

[[42]]
NULL

[[43]]
NULL

[[44]]
NULL

[[45]]
NULL

[[46]]
NULL

[[47]]
NULL

[[48]]
NULL

[[49]]
NULL

[[50]]
NULL

[[51]]
NULL

[[52]]
NULL

[[53]]
NULL

[[54]]
NULL

[[55]]
NULL

[[56]]
NULL

[[57]]
NULL

[[58]]
NULL

[[59]]
NULL

[[60]]
NULL

[[61]]
NULL

[[62]]
NULL

[[63]]
NULL

[[64]]
NULL

[[65]]
NULL

[[66]]
NULL

[[67]]
NULL

[[68]]
NULL

[[69]]
NULL

[[70]]
NULL

[[71]]
NULL

[[72]]
NULL

[[73]]
NULL

[[74]]
NULL

[[75]]
NULL

[[76]]
NULL

[[77]]
NULL

[[78]]
NULL

[[79]]
NULL

[[80]]
NULL

[[81]]
NULL

[[82]]
NULL

[[83]]
NULL

[[84]]
NULL

[[85]]
NULL

[[86]]
NULL

[[87]]
NULL

[[88]]
NULL

[[89]]
NULL

[[90]]
NULL

[[91]]
NULL

[[92]]
NULL

[[93]]
NULL

[[94]]
NULL

[[95]]
NULL

[[96]]
NULL

[[97]]
NULL

[[98]]
NULL

[[99]]
NULL

[[100]]
NULL

[[101]]
NULL

[[102]]
NULL

[[103]]
NULL

[[104]]
NULL

[[105]]
NULL

[[106]]
NULL

[[107]]
NULL

[[108]]
NULL

[[109]]
NULL

[[110]]
NULL

[[111]]
NULL

[[112]]
NULL

[[113]]
NULL

[[114]]
NULL

[[115]]
NULL

[[116]]
NULL

[[117]]
NULL

[[118]]
NULL

[[119]]
NULL

[[120]]
NULL

[[121]]
NULL

[[122]]
NULL

[[123]]
NULL

[[124]]
NULL

[[125]]
NULL

[[126]]
NULL

[[127]]
NULL

[[128]]
NULL

[[129]]
NULL

[[130]]
NULL

[[131]]
NULL

[[132]]
NULL

[[133]]
NULL

[[134]]
NULL

[[135]]
NULL

[[136]]
NULL

[[137]]
NULL

[[138]]
NULL

[[139]]
NULL

[[140]]
NULL

[[141]]
NULL

[[142]]
NULL

[[143]]
NULL

[[144]]
NULL

[[145]]
NULL

[[146]]
NULL

[[147]]
NULL

[[148]]
NULL

[[149]]
NULL

[[150]]
NULL

[[151]]
NULL

[[152]]
NULL

[[153]]
NULL

> 
> ## ---------------
> ## Standard export
> ## ---------------
> export.fun <- function(x) {
+   dfName <- attr(x, "dfName")
+   ## remove used metadata
+   myAttrs <- c("fileName", "dfName", "dfDescription")
+   attributes(x)[myAttrs] <- NULL
+   ## now save in proper name and export
+   eval(parse(text = sprintf("%s <- x", dfName)))
+   save(list = c(dfName),
+        file = sprintf("../data/%s.rda", dfName),
+        compress = "bzip2")
+ }
> lapply(dfList, export.fun)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

[[31]]
NULL

[[32]]
NULL

[[33]]
NULL

[[34]]
NULL

[[35]]
NULL

[[36]]
NULL

[[37]]
NULL

[[38]]
NULL

[[39]]
NULL

[[40]]
NULL

[[41]]
NULL

[[42]]
NULL

[[43]]
NULL

[[44]]
NULL

[[45]]
NULL

[[46]]
NULL

[[47]]
NULL

[[48]]
NULL

[[49]]
NULL

[[50]]
NULL

[[51]]
NULL

[[52]]
NULL

[[53]]
NULL

[[54]]
NULL

[[55]]
NULL

[[56]]
NULL

[[57]]
NULL

[[58]]
NULL

[[59]]
NULL

[[60]]
NULL

[[61]]
NULL

[[62]]
NULL

[[63]]
NULL

[[64]]
NULL

[[65]]
NULL

[[66]]
NULL

[[67]]
NULL

[[68]]
NULL

[[69]]
NULL

[[70]]
NULL

[[71]]
NULL

[[72]]
NULL

[[73]]
NULL

[[74]]
NULL

[[75]]
NULL

[[76]]
NULL

[[77]]
NULL

[[78]]
NULL

[[79]]
NULL

[[80]]
NULL

[[81]]
NULL

[[82]]
NULL

[[83]]
NULL

[[84]]
NULL

[[85]]
NULL

[[86]]
NULL

[[87]]
NULL

[[88]]
NULL

[[89]]
NULL

[[90]]
NULL

[[91]]
NULL

[[92]]
NULL

[[93]]
NULL

[[94]]
NULL

[[95]]
NULL

[[96]]
NULL

[[97]]
NULL

[[98]]
NULL

[[99]]
NULL

[[100]]
NULL

[[101]]
NULL

[[102]]
NULL

[[103]]
NULL

[[104]]
NULL

[[105]]
NULL

[[106]]
NULL

[[107]]
NULL

[[108]]
NULL

[[109]]
NULL

[[110]]
NULL

[[111]]
NULL

[[112]]
NULL

[[113]]
NULL

[[114]]
NULL

[[115]]
NULL

[[116]]
NULL

[[117]]
NULL

[[118]]
NULL

[[119]]
NULL

[[120]]
NULL

[[121]]
NULL

[[122]]
NULL

[[123]]
NULL

[[124]]
NULL

[[125]]
NULL

[[126]]
NULL

[[127]]
NULL

[[128]]
NULL

[[129]]
NULL

[[130]]
NULL

[[131]]
NULL

[[132]]
NULL

[[133]]
NULL

[[134]]
NULL

[[135]]
NULL

[[136]]
NULL

[[137]]
NULL

[[138]]
NULL

[[139]]
NULL

[[140]]
NULL

[[141]]
NULL

[[142]]
NULL

[[143]]
NULL

[[144]]
NULL

[[145]]
NULL

[[146]]
NULL

[[147]]
NULL

[[148]]
NULL

[[149]]
NULL

[[150]]
NULL

[[151]]
NULL

[[152]]
NULL

[[153]]
NULL

> 
